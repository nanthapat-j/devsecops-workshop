#!/bin/bash
# DevSecOps Workshop - Prerequisites Checker
# Check if all required tools are installed for the workshop

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Thai messages
TITLE="üîí DevSecOps Workshop - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
CHECKING="üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
FOUND="‚úÖ ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß"
NOT_FOUND="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
WARNING="‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
SUCCESS="üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

echo -e "${BLUE}${TITLE}${NC}"
echo "=============================================="

# Function to check if command exists
check_command() {
    local cmd=$1
    local name=$2
    local version_cmd=$3
    local min_version=${4:-""}
    
    printf "%-30s" "${CHECKING} ${name}..."
    
    if command -v "$cmd" &> /dev/null; then
        local version=$(eval "$version_cmd" 2>/dev/null || echo "unknown")
        echo -e "${GREEN}${FOUND}${NC} (${version})"
        return 0
    else
        echo -e "${RED}${NOT_FOUND}${NC}"
        return 1
    fi
}

# Function to check AWS credentials
check_aws_credentials() {
    printf "%-30s" "${CHECKING} AWS Credentials..."
    
    if aws sts get-caller-identity &> /dev/null; then
        local account=$(aws sts get-caller-identity --query Account --output text 2>/dev/null)
        local region=$(aws configure get region 2>/dev/null || echo "not-set")
        echo -e "${GREEN}${FOUND}${NC} (Account: ${account}, Region: ${region})"
        
        # Check if region is set to ap-southeast-1 for Thai compliance
        if [[ "$region" != "ap-southeast-1" ]]; then
            echo -e "${YELLOW}${WARNING}${NC} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ap-southeast-1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢"
        fi
        return 0
    else
        echo -e "${RED}${NOT_FOUND}${NC}"
        echo -e "${YELLOW}${WARNING}${NC} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AWS credentials: aws configure"
        return 1
    fi
}

# Function to check Kubernetes cluster access
check_kubernetes() {
    printf "%-30s" "${CHECKING} Kubernetes Cluster..."
    
    if kubectl cluster-info &> /dev/null; then
        local context=$(kubectl config current-context 2>/dev/null || echo "unknown")
        echo -e "${GREEN}${FOUND}${NC} (Context: ${context})"
        return 0
    else
        echo -e "${YELLOW}${WARNING}${NC} ‡πÑ‡∏°‡πà‡∏°‡∏µ cluster (‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Terraform)"
        return 0  # This is OK, we'll create the cluster
    fi
}

# Function to check Docker daemon
check_docker_daemon() {
    printf "%-30s" "${CHECKING} Docker Daemon..."
    
    if docker info &> /dev/null; then
        echo -e "${GREEN}${FOUND}${NC} (Running)"
        return 0
    else
        echo -e "${RED}${NOT_FOUND}${NC}"
        echo -e "${YELLOW}${WARNING}${NC} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Docker daemon"
        return 1
    fi
}

# Initialize counters
missing_tools=0
total_checks=0

echo ""
echo "üõ†Ô∏è Core Tools (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏Å):"
echo "================================"

# Check core tools
tools=(
    "aws:AWS CLI:aws --version"
    "terraform:Terraform:terraform version"
    "kubectl:Kubernetes CLI:kubectl version --client"
    "docker:Docker:docker --version"
    "helm:Helm:helm version --short"
    "node:Node.js:node --version"
    "npm:NPM:npm --version"
    "git:Git:git --version"
    "jq:jq JSON processor:jq --version"
    "curl:cURL:curl --version | head -1"
)

for tool in "${tools[@]}"; do
    IFS=':' read -r cmd name version_cmd <<< "$tool"
    total_checks=$((total_checks + 1))
    if ! check_command "$cmd" "$name" "$version_cmd"; then
        missing_tools=$((missing_tools + 1))
    fi
done

echo ""
echo "üîê Security Tools (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢):"
echo "============================================="

# Check security tools (optional but recommended)
security_tools=(
    "trivy:Trivy Scanner:trivy --version"
    "hadolint:Dockerfile Linter:hadolint --version"
    "tfsec:Terraform Security:tfsec --version"
    "checkov:Infrastructure Scanner:checkov --version"
)

optional_missing=0
for tool in "${security_tools[@]}"; do
    IFS=':' read -r cmd name version_cmd <<< "$tool"
    if ! check_command "$cmd" "$name" "$version_cmd"; then
        optional_missing=$((optional_missing + 1))
    fi
done

echo ""
echo "‚òÅÔ∏è Cloud and Kubernetes (‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå‡πÅ‡∏•‡∏∞ Kubernetes):"
echo "=============================================="

# Check cloud and kubernetes connectivity
total_checks=$((total_checks + 1))
if ! check_aws_credentials; then
    missing_tools=$((missing_tools + 1))
fi

check_kubernetes
check_docker_daemon

echo ""
echo "üìä System Information (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö):"
echo "===================================="

# System information
echo "Operating System: $(uname -s) $(uname -r)"
echo "Architecture: $(uname -m)"
echo "Available Memory: $(free -h 2>/dev/null | awk '/^Mem:/ {print $2}' || echo 'N/A')"
echo "Available Disk: $(df -h . 2>/dev/null | awk 'NR==2 {print $4}' || echo 'N/A')"

echo ""
echo "üìã Summary (‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•):"
echo "===================="

if [[ $missing_tools -eq 0 ]]; then
    echo -e "${GREEN}${SUCCESS} All required tools are installed! (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á!)${NC}"
    echo ""
    echo "üöÄ Ready to start the workshop! Run:"
    echo "   make deploy-all"
    exit 0
else
    echo -e "${RED}Missing ${missing_tools} required tools (‡∏Ç‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ ${missing_tools} ‡∏ä‡∏¥‡πâ‡∏ô)${NC}"
    echo ""
    echo "üì• To install missing tools (‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î):"
    echo "   make install-tools"
    echo ""
    echo "üìö Manual installation guide:"
    echo "   https://github.com/nanthapat-j/devsecops-workshop/blob/main/docs/installation.md"
    exit 1
fi

if [[ $optional_missing -gt 0 ]]; then
    echo -e "${YELLOW}Note: ${optional_missing} optional security tools are missing${NC}"
    echo "These will be installed automatically during setup if needed."
fi