name: üöÄ Build and Test Pipeline
# DevSecOps Workshop - Secure Application Build Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  NODE_VERSION: 18
  PYTHON_VERSION: 3.11
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # Application testing
  test-applications:
    name: üß™ Application Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/${{ matrix.app }}
          npm ci

      - name: Run linting
        run: |
          cd apps/${{ matrix.app }}
          npm run lint

      - name: Run unit tests
        run: |
          cd apps/${{ matrix.app }}
          npm run test:coverage

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/${{ matrix.app }}/coverage/lcov.info
          flags: ${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

  # Infrastructure validation
  validate-infrastructure:
    name: üèóÔ∏è Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive infrastructure/

      - name: Terraform Validation
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init -backend=false
          terraform validate

      - name: Terraform Plan (Dry Run)
        run: |
          cd infrastructure/terraform/environments/dev
          terraform plan -var="environment=dev" -input=false

  # Container image building
  build-containers:
    name: üê≥ Build Container Images
    runs-on: ubuntu-latest
    needs: [test-applications]
    strategy:
      matrix:
        app: [frontend, backend]
    outputs:
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      backend-image: ${{ steps.build-backend.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        id: build-${{ matrix.app }}
        uses: docker/build-push-action@v5
        with:
          context: apps/${{ matrix.app }}
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom-${{ matrix.app }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.app }}
          path: sbom-${{ matrix.app }}.spdx.json

  # Security scanning of built images
  scan-containers:
    name: üîç Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-containers]
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.app }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.app }}.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}
          format: 'json'
          output: 'trivy-${{ matrix.app }}.json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Kubernetes manifest validation
  validate-kubernetes:
    name: ‚ò∏Ô∏è Kubernetes Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate Kubernetes manifests
        run: |
          find kubernetes/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating $file"
            kubectl --dry-run=client apply -f "$file"
          done

      - name: Kubeval validation
        run: |
          # Install kubeval
          curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \
            | tar xz kubeval
          chmod +x kubeval
          
          # Validate all Kubernetes files
          find kubernetes/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Kubeval checking $file"
            ./kubeval "$file"
          done

  # Integration tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [build-containers, validate-kubernetes]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: devsecops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Run database migrations
        run: |
          cd apps/backend
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devsecops_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          cd apps/backend
          npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devsecops_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run API tests
        run: |
          cd apps/backend
          npm start &
          sleep 10
          npm run test:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devsecops_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # Performance testing
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          if [ -f "tests/performance/load-test.js" ]; then
            k6 run tests/performance/load-test.js
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # Thai compliance checks
  thai-compliance:
    name: üáπüá≠ Thai Compliance Validation
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, validate-kubernetes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PDPA compliance
        run: |
          echo "üîç Checking PDPA compliance requirements..."
          
          # Check for data classification labels
          if grep -r "data.classification" kubernetes/; then
            echo "‚úÖ Data classification labels found"
          else
            echo "‚ùå Missing data classification labels"
            exit 1
          fi
          
          # Check for encryption settings
          if grep -r "encryption" infrastructure/; then
            echo "‚úÖ Encryption configuration found"
          else
            echo "‚ùå Missing encryption configuration"
            exit 1
          fi
          
          # Check for Thai region usage
          if grep -r "ap-southeast-1" infrastructure/; then
            echo "‚úÖ Thai data residency compliance (ap-southeast-1)"
          else
            echo "‚ùå Missing Thai data residency compliance"
            exit 1
          fi

      - name: Validate BOT compliance
        run: |
          echo "üèõÔ∏è Checking BOT compliance requirements..."
          
          # Check for audit logging
          if grep -r "audit" infrastructure/ kubernetes/; then
            echo "‚úÖ Audit logging configured"
          else
            echo "‚ùå Missing audit logging"
            exit 1
          fi
          
          # Check for backup configuration
          if grep -r "backup" infrastructure/; then
            echo "‚úÖ Backup configuration found"
          else
            echo "‚ùå Missing backup configuration"
            exit 1
          fi

  # Build summary and notification
  build-summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [test-applications, validate-infrastructure, build-containers, scan-containers, validate-kubernetes, integration-tests, thai-compliance]
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# üöÄ Build Pipeline Summary" > build-summary.md
          echo "" >> build-summary.md
          echo "## Build Results" >> build-summary.md
          echo "" >> build-summary.md
          
          echo "| Stage | Status |" >> build-summary.md
          echo "|-------|--------|" >> build-summary.md
          echo "| Application Tests | ${{ needs.test-applications.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Infrastructure Validation | ${{ needs.validate-infrastructure.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Container Build | ${{ needs.build-containers.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Container Security Scan | ${{ needs.scan-containers.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Kubernetes Validation | ${{ needs.validate-kubernetes.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "| Thai Compliance | ${{ needs.thai-compliance.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> build-summary.md
          echo "" >> build-summary.md
          
          echo "## Container Images Built" >> build-summary.md
          echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}\`" >> build-summary.md
          echo "- Backend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}\`" >> build-summary.md
          echo "" >> build-summary.md
          
          echo "## Thai Market Compliance ‚úÖ" >> build-summary.md
          echo "- **PDPA**: Data classification and encryption verified" >> build-summary.md
          echo "- **BOT**: Audit logging and backup configuration validated" >> build-summary.md
          echo "- **Data Residency**: ap-southeast-1 (Singapore) region compliance" >> build-summary.md
          echo "" >> build-summary.md
          
          echo "Built on: $(date)" >> build-summary.md

      - name: Upload build summary
        uses: actions/upload-artifact@v3
        with:
          name: build-summary
          path: build-summary.md

      - name: Comment PR with build summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('build-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });