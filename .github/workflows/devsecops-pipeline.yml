name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # Security Scanning Jobs
  # ================================
  
  secret-scanning:
    name: üîç Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-scanning:
    name: üì¶ Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: applications/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: applications/frontend
        run: npm ci
      
      - name: Run npm audit
        working-directory: applications/frontend
        run: npm audit --audit-level moderate
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  sast-scanning:
    name: üî¨ SAST Code Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  infrastructure-scanning:
    name: üèóÔ∏è Infrastructure Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"
      
      - name: Terraform Format Check
        working-directory: infrastructure/terraform
        run: terraform fmt -check -recursive
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-report.sarif
      
      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform
          soft_fail: true

  # ================================
  # Container Security
  # ================================
  
  container-scanning:
    name: üê≥ Container Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        working-directory: applications/frontend
        run: |
          docker build -t test-image:latest .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-image:latest
          format: sarif
          output: trivy-results.sarif
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif
      
      - name: Docker Scout vulnerability scan
        uses: docker/scout-action@v1
        if: github.event_name == 'pull_request'
        with:
          command: cves
          image: test-image:latest
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ================================
  # Build and Test
  # ================================
  
  build-and-test:
    name: üî® Build and Test
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: applications/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: applications/frontend
        run: npm ci
      
      - name: Run linting with security checks
        working-directory: applications/frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: applications/frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: applications/frontend/coverage/lcov.info
          flags: frontend
          name: codecov-frontend

  # ================================
  # Security Approval Workflow
  # ================================
  
  security-approval:
    name: üõ°Ô∏è Security Review Required
    runs-on: ubuntu-latest
    needs: [sast-scanning, infrastructure-scanning, container-scanning]
    if: github.event_name == 'pull_request'
    environment: security-review
    steps:
      - name: Security review checkpoint
        run: |
          echo "üîç Security scans completed"
          echo "üìã Please review security findings before approval"
          echo "‚úÖ Ready for security team review"

  # ================================
  # Build and Push Container
  # ================================
  
  build-and-push:
    name: üöÄ Build and Push Container
    runs-on: ubuntu-latest
    needs: [build-and-test, container-scanning]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: applications/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.labels['org.opencontainers.image.created'] }}
            VERSION=${{ steps.meta.outputs.labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}

  # ================================
  # DAST Testing (Post-deployment)
  # ================================
  
  dast-testing:
    name: üï∑Ô∏è DAST Security Testing
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://your-app-url.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: Upload ZAP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-report
          path: report_html.html

  # ================================
  # Security Notification
  # ================================
  
  security-notification:
    name: üì¢ Security Notification
    runs-on: ubuntu-latest
    needs: [sast-scanning, infrastructure-scanning, container-scanning, dast-testing]
    if: always()
    steps:
      - name: Notify security team
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#devsecops-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            üö® Security Pipeline Alert üö®
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            Failed Jobs:
            ${{ needs.sast-scanning.result == 'failure' && '‚ùå SAST Scanning' || '' }}
            ${{ needs.infrastructure-scanning.result == 'failure' && '‚ùå Infrastructure Scanning' || '' }}
            ${{ needs.container-scanning.result == 'failure' && '‚ùå Container Scanning' || '' }}
            ${{ needs.dast-testing.result == 'failure' && '‚ùå DAST Testing' || '' }}
            
            Please review and remediate security findings.
      
      - name: Success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#devsecops'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ‚úÖ Security Pipeline Success ‚úÖ
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            All security scans passed successfully!