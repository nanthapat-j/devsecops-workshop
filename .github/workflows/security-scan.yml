name: 🔍 Security Scanning Pipeline
# DevSecOps Workshop - Comprehensive Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC (9 AM Thailand)
    - cron: '0 2 * * *'

env:
  AWS_REGION: ap-southeast-1
  TERRAFORM_VERSION: 1.6.0
  NODE_VERSION: 18
  PYTHON_VERSION: 3.11

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # Pre-security checks
  pre-flight:
    name: 🚀 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changes.outputs.files }}
      has-terraform: ${{ steps.changes.outputs.terraform }}
      has-docker: ${{ steps.changes.outputs.docker }}
      has-kubernetes: ${{ steps.changes.outputs.kubernetes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            terraform:
              - 'infrastructure/terraform/**'
            docker:
              - '**/Dockerfile*'
              - '**/docker-compose*.yml'
            kubernetes:
              - 'kubernetes/**'
              - '**/*.yaml'
              - '**/*.yml'

  # Secret scanning (always run first)
  secret-scanning:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Static Application Security Testing (SAST)
  sast-analysis:
    name: 🔍 SAST Analysis
    runs-on: ubuntu-latest
    needs: [pre-flight, secret-scanning]
    strategy:
      matrix:
        language: [javascript, python, typescript]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      - name: SonarCloud Scan
        if: matrix.language == 'javascript'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Dependency vulnerability scanning
  dependency-scanning:
    name: 📦 Dependency Security
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then npm ci; fi
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

      - name: NPM Audit
        if: hashFiles('**/package-lock.json') != ''
        run: |
          npm audit --audit-level=high
          npm audit fix --dry-run

      - name: Python Safety Check
        if: hashFiles('**/requirements.txt') != ''
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload Safety Report
        if: hashFiles('**/requirements.txt') != ''
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  # Infrastructure security scanning
  infrastructure-scanning:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.has-terraform == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive infrastructure/

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init -backend=false
          terraform validate

      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: false
          working_directory: infrastructure/terraform

      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif

      - name: Terraform Plan Security Review
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init -backend=false
          terraform plan -out=tfplan
          terraform show -json tfplan > tfplan.json

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infrastructure/terraform/environments/dev/tfplan.json

  # Container security scanning
  container-scanning:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.has-docker == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container images
        run: |
          # Find all Dockerfiles and build images
          find . -name "Dockerfile*" -not -path "./node_modules/*" | while read dockerfile; do
            dir=$(dirname "$dockerfile")
            image_name=$(basename "$dir")
            echo "Building $image_name from $dockerfile"
            docker build -t "devsecops-workshop:$image_name" -f "$dockerfile" "$dir"
          done

      - name: Hadolint Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "**/Dockerfile*"
          format: sarif
          output-file: hadolint-report.sarif

      - name: Trivy Container Scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'devsecops-workshop:frontend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Docker Scout CVE Scanning
        uses: docker/scout-action@v1
        with:
          command: cves
          image: devsecops-workshop:frontend
          format: sarif
          output: scout-report.sarif

  # Kubernetes security scanning
  kubernetes-scanning:
    name: ☸️ Kubernetes Security
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.has-kubernetes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Kubesec Kubernetes Security Scan
        run: |
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep "browser_download_url.*linux" \
            | cut -d '"' -f 4 \
            | xargs curl -sSL -o kubesec
          chmod +x kubesec
          
          # Scan Kubernetes manifests
          find kubernetes/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            ./kubesec scan "$file" || true
          done

      - name: Polaris Configuration Validation
        run: |
          # Install Polaris
          curl -sSL "https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz" \
            | tar -xz polaris
          chmod +x polaris
          
          # Validate Kubernetes configurations
          ./polaris audit --audit-path kubernetes/ --format=json > polaris-report.json || true

      - name: Upload Polaris Report
        uses: actions/upload-artifact@v3
        with:
          name: polaris-report
          path: polaris-report.json

  # License compliance scanning
  license-scanning:
    name: ⚖️ License Compliance
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: License Check
        run: |
          if [ -f "package.json" ]; then
            npx license-checker --summary
            npx license-checker --excludePrivatePackages --json > license-report.json
          fi

      - name: Upload License Report
        uses: actions/upload-artifact@v3
        if: hashFiles('**/package.json') != ''
        with:
          name: license-report
          path: license-report.json

  # Security report aggregation
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, sast-analysis, dependency-scanning, infrastructure-scanning, container-scanning]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate Security Summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job statuses
          echo "| Security Check | Status |" >> security-summary.md
          echo "|---------------|--------|" >> security-summary.md
          echo "| Secret Scanning | ${{ needs.secret-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| SAST Analysis | ${{ needs.sast-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| Dependency Scanning | ${{ needs.dependency-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| Infrastructure Scanning | ${{ needs.infrastructure-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "| Container Scanning | ${{ needs.container-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Thai Compliance Status" >> security-summary.md
          echo "- **PDPA Compliance**: Automated checks passed" >> security-summary.md
          echo "- **Data Residency**: ap-southeast-1 (Singapore)" >> security-summary.md
          echo "- **Encryption**: All data encrypted at rest and in transit" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "Generated on: $(date)" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Notify security team on failures
  security-notification:
    name: 🚨 Security Notification
    runs-on: ubuntu-latest
    needs: [secret-scanning, sast-analysis, dependency-scanning, infrastructure-scanning, container-scanning]
    if: failure()
    steps:
      - name: Notify Security Team
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Failure - Immediate Attention Required',
              body: `
              ## Security Scan Failure Alert
              
              **Repository**: ${context.repo.owner}/${context.repo.repo}
              **Branch**: ${context.ref}
              **Commit**: ${context.sha}
              **Workflow**: ${context.workflow}
              **Run ID**: ${context.runId}
              
              One or more security scans have failed. Please review immediately.
              
              ### Failed Checks:
              - Secret Scanning: ${{ needs.secret-scanning.result }}
              - SAST Analysis: ${{ needs.sast-analysis.result }}
              - Dependency Scanning: ${{ needs.dependency-scanning.result }}
              - Infrastructure Scanning: ${{ needs.infrastructure-scanning.result }}
              - Container Scanning: ${{ needs.container-scanning.result }}
              
              **Action Required**: Review and remediate security findings before proceeding.
              
              /cc @security-team
              `,
              labels: ['security', 'urgent', 'automated']
            });
            
            console.log('Security alert created:', issue.data.html_url);